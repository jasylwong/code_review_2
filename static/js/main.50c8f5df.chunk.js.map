{"version":3,"sources":["components/Title.js","components/RadioStation.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["Title","content","id","RadioStation","station","src","stationLockScreenImage","alt","Name","height","stationAACStream","paused","autoPlay","Control","handleBackward","handleClick","handleForward","isPlaying","onClick","type","className","App","useState","setIsPlaying","stations","setStations","setStation","stationCounter","setStationCounter","useEffect","axios","get","then","res","data","stationBrandRelated","length","audio","document","getElementById","pause","play","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAUeA,MARf,YAA6B,IAAZC,EAAW,EAAXA,QACf,OACE,wBAAIC,GAAG,SACJD,ICMQE,MATf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OACE,6BACE,yBAAKC,IAAKD,EAAQE,uBAAwBC,IAAKH,EAAQI,KAAMC,OAAO,UACpE,2BAAOP,GAAG,QAAQG,IAAKD,EAAQM,iBAAkBC,OAAO,OAAOC,UAAQ,MCiB9DC,MApBf,YAEI,IADFC,EACC,EADDA,eAAgBC,EACf,EADeA,YAAaC,EAC5B,EAD4BA,cAAeC,EAC3C,EAD2CA,UAE5C,OACE,oCACE,4BAAQC,QAAS,kBAAMJ,KAAkBK,KAAK,SAASC,UAAU,uBAC/D,uBAAGA,UAAU,+BAEf,4BAAQlB,GAAG,SAASgB,QAAS,kBAAMH,KAAeI,KAAK,SAASC,UAAU,UAEtEH,EAAY,uBAAGG,UAAU,6BAAgC,uBAAGA,UAAU,6BAG1E,4BAAQF,QAAS,kBAAMF,KAAiBG,KAAK,SAASC,UAAU,uBAC9D,uBAAGA,UAAU,gC,MCkDNC,MA5Df,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNL,EADM,KACKM,EADL,OAEmBD,mBAAS,MAF5B,mBAENE,EAFM,KAEIC,EAFJ,OAGiBH,mBAAS,IAH1B,mBAGNlB,EAHM,KAGGsB,EAHH,OAI+BJ,mBAAS,GAJxC,mBAINK,EAJM,KAIUC,EAJV,KAwCb,OAlCAC,qBAAU,WACRC,IAAMC,IAAI,4GACPC,MAAK,SAACC,GACLR,EAAYQ,EAAIC,KAAKC,qBACrBT,EAAWO,EAAIC,KAAKC,oBAAoB,SAE3C,IA6BD,yBAAKf,UAAU,OACb,6BACA,6BACA,kBAAC,EAAD,CAAOnB,QAAQ,iBACf,6BACA,kBAAC,EAAD,CAAcG,QAASA,IACvB,6BACA,6BACA,6BACA,kBAAC,EAAD,CACEU,eA/BiB,WACE,IAAnBa,GACFC,EAAkBJ,EAASY,OAAS,GACpCV,EAAWF,EAASA,EAASY,OAAS,MAEtCR,EAAkBD,EAAiB,GACnCD,EAAWF,EAASG,EAAiB,MA0BnCZ,YAtCc,WAClB,IAAMsB,EAAQC,SAASC,eAAe,SAEtC,OADAhB,GAAcN,GACPA,EAAYoB,EAAMG,QAAUH,EAAMI,QAoCrCzB,cAvBgB,WAChBW,IAAmBH,EAASY,OAAS,GACvCR,EAAkB,GAClBF,EAAWF,EAAS,MAEpBI,EAAkBD,EAAiB,GACnCD,EAAWF,EAASG,EAAiB,MAkBnCV,UAAWA,MCjDCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASC,eAAe,SDyHpB,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50c8f5df.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Title({ content }) {\n  return (\n    <h1 id=\"title\">\n      {content}\n    </h1>\n  );\n}\n\nexport default Title;\n","import React from 'react';\n\nfunction RadioStation({ station }) {\n  return (\n    <div>\n      <img src={station.stationLockScreenImage} alt={station.Name} height=\"250vh\" />\n      <audio id=\"audio\" src={station.stationAACStream} paused=\"true\" autoPlay />\n    </div>\n  );\n}\n\nexport default RadioStation;\n","\nimport React from 'react';\n\nfunction Control({\n  handleBackward, handleClick, handleForward, isPlaying,\n}) {\n  return (\n    <>\n      <button onClick={() => handleBackward()} type=\"button\" className=\"button small-button\">\n        <i className=\"fa fa-step-backward fa-2x\" />\n      </button>\n      <button id=\"player\" onClick={() => handleClick()} type=\"button\" className=\"button\">\n        {\n          isPlaying ? <i className=\"fa fa-pause-circle fa-4x\" /> : <i className=\"fa fa-play-circle fa-4x\" />\n        }\n      </button>\n      <button onClick={() => handleForward()} type=\"button\" className=\"button small-button\">\n        <i className=\"fa fa-step-forward fa-2x\" />\n      </button>\n    </>\n  );\n}\n\nexport default Control;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Title from './components/Title';\nimport RadioStation from './components/RadioStation';\nimport Control from './components/Control';\nimport './App.css';\n\nfunction App() {\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [stations, setStations] = useState(null);\n  const [station, setStation] = useState('');\n  const [stationCounter, setStationCounter] = useState(0);\n\n  useEffect(() => {\n    axios.get('https://cors-anywhere.herokuapp.com/https://listenapi.planetradio.co.uk/api9/initdadi/absolute-radio-10s')\n      .then((res) => {\n        setStations(res.data.stationBrandRelated);\n        setStation(res.data.stationBrandRelated[0]);\n      });\n  }, []);\n\n  const handleClick = () => {\n    const audio = document.getElementById('audio');\n    setIsPlaying(!isPlaying);\n    return isPlaying ? audio.pause() : audio.play();\n  };\n\n  const handleBackward = () => {\n    if (stationCounter === 0) {\n      setStationCounter(stations.length - 1);\n      setStation(stations[stations.length - 1]);\n    } else {\n      setStationCounter(stationCounter - 1);\n      setStation(stations[stationCounter - 1]);\n    }\n  };\n\n  const handleForward = () => {\n    if (stationCounter === stations.length - 1) {\n      setStationCounter(0);\n      setStation(stations[0]);\n    } else {\n      setStationCounter(stationCounter + 1);\n      setStation(stations[stationCounter + 1]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <br />\n      <br />\n      <Title content=\"Radio-Active\" />\n      <br />\n      <RadioStation station={station} />\n      <br />\n      <br />\n      <br />\n      <Control\n        handleBackward={handleBackward}\n        handleClick={handleClick}\n        handleForward={handleForward}\n        isPlaying={isPlaying}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}